local SCRIPT_TITLE = 'Mutes notes V1.0'

--[[

lua file name: MuteNotes.lua

Double notes to mute them
Remove doubled notes to unmute them

2025 - JF AVILES
--]]

-- Generated by JFA TranslateScripts.lua
function getTranslations(langCode)
	return getArrayLanguageStrings()[langCode]
end

-- Generated by JFA TranslateScripts.lua
function getArrayLanguageStrings()
	return {
		["en-us"] = {
			{"No notes selected! Please select notes!", "No notes selected! Please select notes!"},
		},
	}
end

function getClientInfo()
	return {
		name = SV:T(SCRIPT_TITLE),
		category = "_JFA_Tools",
		author = "JFAVILES",
		versionNumber = 1,
		minEditorVersion = 65540
	}
end

-- Define a class "NotesObject"
NotesObject = {
	DEFAULT_PHONEME = "sil",
	DEFAULT_LYRICS = "",
	DEFAULT_PITCH = 2, -- note + 1
	project = nil,
	editor = nil,
	timeAxis = nil,
	selection = nil,
	selectedNotes = nil,
	currentGroupRef = nil,
	currentGroupNotes = nil,
	initialSelectedNotes = {},
	selectedNotesSaved = {},
	mutedNotes = nil,
}

-- Constructor method for the NotesObject class
function NotesObject:new()
    local notesObject = {}
    setmetatable(notesObject, self)
    self.__index = self
	
    self.project = SV:getProject()
    self.editor =  SV:getMainEditor()
    self.timeAxis = self.project:getTimeAxis()
	self.selection = self.editor:getSelection()
	self.selectedNotes = self.selection:getSelectedNotes()
	self.initialSelectedNotes = self:saveSelectedNotes()
	self.currentGroupRef = self.editor:getCurrentGroup()
	self.currentGroupNotes = self.currentGroupRef:getTarget()
	self.mutedNotes = self:getMutedNotes(self.currentGroupNotes)
	
    return self
end

-- Show message dialog
function NotesObject:show(message)
	SV:showMessageBox(SV:T(SCRIPT_TITLE), message)
end

-- Get notes muted (double) in group
function NotesObject:getMutedNotes(notesGroup)
	local mutedNotes = {}
	local numNotes = notesGroup:getNumNotes()
	local oldNote = nil
	
	-- All notes in group
	for iNote = 1, numNotes do
		local note = notesGroup:getNote(iNote)
		if oldNote ~= nil then
			if note:getOnset() == oldNote:getOnset() then
				local noteMuted = oldNote
				if note:getPitch() > oldNote:getPitch() then
					noteMuted = note
				end
				table.insert(mutedNotes, noteMuted)
			end
		end
		oldNote = note
	end
	return mutedNotes
end

-- Check note muted (double)
function NotesObject:isNoteMuted(note)
	local muted = false
	local mutedNoteFound = nil
	
	if #self.mutedNotes > 0 then
		for _, noteMuted in pairs(self.mutedNotes) do
			if noteMuted:getOnset() == note:getOnset() then
				muted = true
				mutedNoteFound = noteMuted
				indexMutedNote = mutedNoteFound:getIndexInParent()
				indexNote = note:getIndexInParent()
				break
			end
		end
	end
	return muted, mutedNoteFound, indexMutedNote, note, indexNote
end

-- Save selected notes
function NotesObject:saveSelectedNotes()
	local selectedNotes = {}
	for _, note in pairs(self.selectedNotes) do
		if note:getPhonemes() ~= self.DEFAULT_PHONEME then
			table.insert(selectedNotes, note)
		end
	end
	return selectedNotes
end

-- Set saved selected notes
function NotesObject:setSavedSelectedNotes()
	self.selection:clearNotes()
	for _, note in pairs(self.selectedNotesSaved) do
		self.selection:selectNote(note)
	end
end

-- Start project notes processing
function NotesObject:start()
	if #self.selectedNotes == 0 then
		self:show(SV:T("No notes selected! Please select notes!"))
	else
		-- for each selected notes
		for _, note in pairs(self.initialSelectedNotes) do
			local isMuted, mutedNoteFound, indexNoteFound, noteOri, indexNoteOri = self:isNoteMuted(note)
			if isMuted then
				-- self:show("note: " .. note:getLyrics())
				-- Delete muted note
				self.currentGroupNotes:removeNote(indexNoteFound)
				-- Store note
				table.insert(self.selectedNotesSaved, noteOri)
				-- Refresh muted notes count
				self.mutedNotes = self:getMutedNotes(self.currentGroupNotes)
			else
				local oldNote = note:clone()
				-- Add muted note
				local newNote = note:clone()
				newNote:setPhonemes(self.DEFAULT_PHONEME)
				newNote:setLyrics(self.DEFAULT_LYRICS)
				newNote:setPitch(note:getPitch() + self.DEFAULT_PITCH) -- Add pitch + 1 to double note => Silent
				
				-- Delete note to be able to add a new silent note 
				-- A workaround because when adding a same note by script => system move the original note!!
				local indexNote = note:getIndexInParent()
				self.currentGroupNotes:removeNote(indexNote)
				
				-- Add oldnote previously saved & cloned
				self.currentGroupNotes:addNote(newNote)
				-- Add the new silent note
				self.currentGroupNotes:addNote(oldNote)
				-- Store new oldnotes
				table.insert(self.selectedNotesSaved, oldNote)
			end
		end
		self:setSavedSelectedNotes()
	end
end
  
-- Main process
function main()
	local notesObject = NotesObject:new()
	notesObject:start()
	
	-- End of script
	SV:finish()
end
