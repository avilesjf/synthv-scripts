local SCRIPT_TITLE = 'Split note into syllabes V1.0'

--[[

Synthesizer V Studio Pro Script
 
lua file name: SplitSyllabes.lua

2025 - JF AVILES
--]]

-- Generated by JFA TranslateScripts.lua
function getTranslations(langCode)
	return getArrayLanguageStrings()[langCode]
end

-- Generated by JFA TranslateScripts.lua
function getArrayLanguageStrings()
	return {
		["en-us"] = {
			{"note:getPhonemes() before: ", "note:getPhonemes() before: "},
			{"note:getPhonemes() after: ", "note:getPhonemes() after: "},
			{"attributes:", "attributes:"},
			{"new attributes:", "new attributes:"},
			{"attrib.tNoteOffset: ", "attrib.tNoteOffset: "},
			{"evenSyllableDuration: ", "evenSyllableDuration: "},
			{"phoneme: ", "phoneme: "},
			{"No notes selected!", "No notes selected!"},
		},
	}
end

function getClientInfo()
	return {
		name = SV:T(SCRIPT_TITLE),
		category = "_JFA_Tools",
		author = "JFAVILES",
		versionNumber = 1,
		minEditorVersion = 65540
	}
end

-- Get attributes in string
function getAttributes(attrib)
	local attribStr = ""
	for k,v in pairs(attrib) do
		if type(v) == "table" then
			attribStr = attribStr .. k .. ":"
			for j,w in pairs(v) do
				attribStr = attribStr .. j .. ": " .. tostring(w) .. ","
			end
			attribStr = attribStr  .. "\r"
		else
			attribStr = attribStr .. k .. ": " .. tostring(v) .. "\r"
		end
	end
	return attribStr
end

-- Split string by sep char
function split(str, sep)
   local result = {}
   local regex = ("([^%s]+)"):format(sep)
   for each in str:gmatch(regex) do
	  table.insert(result, each)
   end
   return result
end

-- Get phoneme from note
function getPhonemesFromNote(note)
	local groupRef = SV:getMainEditor():getCurrentGroup()
	local groupPhonemes = SV:getPhonemesForGroup(groupRef)
	return groupPhonemes[note:getIndexInParent()]
end

-- Set default value for array
function createArray(phonemes, val)
	local result = {}
	for iArray=1, #phonemes do
		table.insert(result, val)
	end
	return result
end

-- Split note into syllabes
function splitNoteIntoSyllabes(selectedNotes)
	-- local timeGapBlicks = getTimeGapInBlicks(timeGapSeconds)
	
	-- -- for each selected notes
	for iNote = 1, #selectedNotes do
		local note = selectedNotes[iNote]
		local attrib = note:getAttributes()
		local notePhonemes = getPhonemesFromNote(note)	
		local phonemes = split(notePhonemes, " ")
		
		-- SV:showMessageBox(SV:T(SCRIPT_TITLE), SV:T("note:getPhonemes() before: ") .. note:getPhonemes())
		note:setPhonemes(notePhonemes)
		-- SV:showMessageBox(SV:T(SCRIPT_TITLE), SV:T("note:getPhonemes() after: ") .. note:getPhonemes())
		
		-- SV:showMessageBox(SV:T(SCRIPT_TITLE), SV:T("attributes:") .. "\r" .. getAttributes(attrib))
		
		attrib.dur = createArray(phonemes, 1)
		attrib.strength = createArray(phonemes, 1)
		attrib.alt = createArray(phonemes, 0)
		-- attrib.dur = {1, 1, 1}      -- 0 = 20%, 1 = 100%, 2 = 180%
		-- attrib.strength = {1, 1, 1} -- 0 = 20%, 1 = 100%, 2 = 180%
		-- attrib.alt = {0, 0, 0}      -- 0 = DFLT, 1 = ALT1, 2 = ALT2 etc.
		
		-- Evently split note into syllables
		-- attrib.evenSyllableDuration = false -- Not working
		
		-- tF0Offset: number pitch transition - offset (seconds)
		-- tF0Left: number pitch transition - duration left (seconds)
		-- tF0Right: number pitch transition - duration right (seconds)
		-- dF0Left: number pitch transition - depth left (semitones)
		-- dF0Right: number pitch transition - depth right (semitones)
		-- tF0VbrStart: number vibrato - start (seconds)
		-- tF0VbrLeft: number vibrato - left (seconds)
		-- tF0VbrRight: number vibrato - right (seconds)
		-- dF0Vbr: number vibrato - depth (semitones)
		-- pF0Vbr: number vibrato - phase (radian, from -π to π)
		-- fF0Vbr: number vibrato - frequency (Hz)
		-- tNoteOffset: number timing and phonemes - note offset (seconds)
		-- exprGroup (optional): string expression group
		-- dur: array of number for phoneme duration scaling
		-- alt: array of number for phoneme alternative pronunciation		-- Force value
		note:setAttributes(attrib)
		
		-- local newAttrib = note:getAttributes()
		-- SV:showMessageBox(SV:T(SCRIPT_TITLE), SV:T("new attributes:") .. "\r" .. getAttributes(newAttrib))
	end
	-- local mainNoteGroup = SV:getMainEditor():getCurrentGroup():getTarget()
	-- local noteFirst = mainNoteGroup:getNote(1)
	
	-- local attrib = noteFirst:getAttributes()
	
	-- -- SV:showMessageBox(SV:T(SCRIPT_TITLE), SV:T("attrib.tNoteOffset: ") .. attrib.tNoteOffset)
	-- SV:showMessageBox(SV:T(SCRIPT_TITLE), SV:T("evenSyllableDuration: ") .. tostring(attrib.evenSyllableDuration))
	-- attrib.evenSyllableDuration = false

	-- attrib.tNoteOffset = 5
	-- -- attrib.alt = {0, 1, 2, 3, 5, 10}
	-- -- attrib.alt = {}
	-- noteFirst:setAttributes(attrib)
	-- -- noteFirst:setAttributes({evenSyllableDuration=true})
	-- -- local phoneme = noteFirst:getPhonemes()
	-- -- local lyrics = noteFirst:getLyrics()
	-- -- SV:showMessageBox(SV:T(SCRIPT_TITLE), SV:T("phoneme: ") .. phoneme .. ", lyrics: " .. lyrics)
end

-- Get selected notes
function getSelectedNotes()
	local selection = SV:getMainEditor():getSelection()
	local selectedNotes = selection:getSelectedNotes()
	return selectedNotes
end

-- Get time gap in blicks
function getTimeGapInBlicks(seconds)
    local project = SV:getProject()
    local timeAxis = project:getTimeAxis()
	
	-- A flick (frame-tick) is a very small unit of time.
	-- It is 1/705600000 (SV.QUARTER) of a second, exactly.
	return timeAxis:getBlickFromSeconds(seconds)
end

-- Main process
function main()
	local selectedNotes = getSelectedNotes()
	
	if #selectedNotes == 0 then
		SV:showMessageBox(SV:T(SCRIPT_TITLE), SV:T("No notes selected!"))
	else		
		-- Start process
		splitNoteIntoSyllabes(selectedNotes)
	end
	
	SV:finish()
end