local SCRIPT_TITLE = '.Playing'

--[[

Synthesizer V Studio Pro Script
 
lua file name: PlayingPanel.lua
Show lyrics when lyrics are set to a full phrase (with + or - for subsequent notes)
Similar karaoke display.

Notice: Works only with script panel 
		introduced with Synthesizer V version >= 2.1.2b1

2025 - JF AVILES
--]]

function getClientInfo()
	return {
		name = SV:T(SCRIPT_TITLE),
		-- category = "_JFA_Panels",
		author = "JFAVILES",
		versionNumber = 1,
		minEditorVersion = 131329,
		type = "SidePanelSection"
	}
end

-- Generated by JFA TranslateScripts.lua
function getTranslations(langCode)
	return getArrayLanguageStrings()[langCode]
end

-- Generated by JFA TranslateScripts.lua
function getArrayLanguageStrings()
	return {
		["en-us"] = {
			{"stopped", "stopped"},
			{"Play", "Play"},
			{"Version", "Version"},
			{"author", "author"},
			{"minEditorVersion", "minEditorVersion"},
			{"Stop", "Stop"},
			{"Time", "Time"},
			{"Group", "Group"},
			{"Lyrics display: decay", "Lyrics display: decay"},
		},
	}
end

-- Define a class  "NotesObject"
NotesObject = {
	playBack = nil,
	playHeadPosition = nil,
	displayVersion = true,			-- display version
	displayAuthor = false,			-- display author
	displayGroupName = false,		-- display group name and time
	timeDecay = 0.4,				-- timeDecay to display lyrics before time (similar karaoke)
	errorMessages = {},
	hostinfo = nil,
	osType = "",
	osName = "",
	hostName = "",
	languageCode = "", 
	hostVersion = "",
	hostVersionNumber = 0,
	playBackStatus = "",
	currentSeconds = 0,
	noteInfo = nil,
	projectDuration = 0,
	applyButtonValue = nil, 		-- button apply get lyrics
	keyNames = {},
	lyricsException = {},
	lyrics = "",
	labelApply = ""
}

-- Constructor method for the NotesObject class
function NotesObject:new()
    local notesObject = {}
    setmetatable(notesObject, self)
    self.__index = self
	
	self.keyNames = {"C", "Db", "D", "Eb", "E", "F", "Gb", "G", "Ab", "A", "Bb", "B"}
	self.lyricsException = {"+", "++", "-", "br", "'", ".cl", ".pau", ".sil"}
	self.labelApply = SV:T("Play")
	
	self:getHostInformations()
	
	self.currentSeconds = 	SV:getPlayback():getPlayhead()
	self.projectDuration = 	self:getProjectDuration()
	
	self.controls = self:getControls()
	
	self:initializeControlsValues()
	self:setControlsCallback()
	
	self.applyButtonValue = SV:create("WidgetValue")
	
	self.statusTextValue = SV:create("WidgetValue")
	self.statusTextValue:setValue("")
	self.statusTextValue:setEnabled(false)

	self.lyricsTextValue = SV:create("WidgetValue")
	self.lyricsTextValue:setValue("")
	self.lyricsTextValue:setEnabled(false)
	
	self:setButtonApplyControlCallback()
	
	self.controls.timeDecay.value:setValue(self.timeDecay)
	
	local infos = getClientInfo()

	self.infosToDisplay = ""
	if self.displayVersion then
		self.infosToDisplay = self.infosToDisplay .. SV:T("Version") .. ": " ..  infos.versionNumber
		if self.displayAuthor then
			self.infosToDisplay = self.infosToDisplay .. " - " .. SV:T("author") .. ": " .. infos.author
		end
	end
	-- self.infosToDisplay = self.infosToDisplay .. SV:T("minEditorVersion") .. ": " ..  infos.minEditorVersion
	self:addTextPanel(self.infosToDisplay)

    return 	self
end

-- Show message dialog
function NotesObject:show(message)
	SV:showMessageBox(SV:T(SCRIPT_TITLE), message)
end

-- Get selected groups
function NotesObject:getSelectedGroups()	
	return SV:getArrangement():getSelection():getSelectedGroups()
end

-- Get current track
function NotesObject:getCurrentTrack()
	return SV:getMainEditor():getCurrentTrack()
end

-- Get timeAxis
function NotesObject:getTimeAxis()
	return self:getProject():getTimeAxis()
end

-- Get project
function NotesObject:getProject()
	return SV:getProject()
end

-- Get filename only
function NotesObject:getFileNameOnly(file)
      return file:match("^.+\\(.+)$")
end

-- Add log into self.logs
function NotesObject:addLogs(message)
	table.insert(self.logs, message)
end

-- Display logs into panel
function NotesObject:addLogsInPanel()
	for i = 1, #self.logs do
		self:addTextPanel(self.logs[i])
	end
end

-- Set lyrics text in panel
function NotesObject:setlyricsTrackTextPanel(lyricsTrack)
	self.lyricsTextValue:setValue(lyricsTrack)
end

-- Display message box in panel
function NotesObject:addTextPanel(message)
	local old = self.statusTextValue:getValue()
	local sepLine = "\r"
	if #old > 0 then
		message = old .. sepLine .. message
	end
	self.statusTextValue:setValue(message)
end

-- Clear display message in panel
function NotesObject:clearTextPanel()
	self.statusTextValue:setValue("")
end

-- Store error message
function NotesObject:error(message)
	table.insert(self.errorMessages, message)
end

-- set project modified
function NotesObject:setProjectUpdated()
	local currentTrack = self:getCurrentTrack()
	currentTrack:setName(currentTrack:getName())	
end

-- Clear user project data
function NotesObject:clearLyricsData()
	self.lyricsTrack = ""
end

-- Get controls panel
function NotesObject:getControls()

	local controls = {
		timeDecay = {								-- Slider: time decay for lyrics display (karaoke)
			value = SV:create("WidgetValue"),
			defaultValue = 0, 
			paramKey = "timeDecay"
		},
	}
	return controls
end

-- Initialize widget values
function NotesObject:initializeControlsValues()
	-- Initialize widget values
	for key, control in pairs(self.controls) do
		control.value:setValue(control.defaultValue)
		-- self:addLogs(key .. "=" .. tostring(control.defaultValue))
		-- self:addLogs(key .. "=" .. self:getObjectProperties(control))
	end
end

-- Set controls callback
function NotesObject:setControlsCallback()
	for key, control in pairs(self.controls) do
		control.value:setValueChangeCallback(function()
				-- self:addLogsInPanel()
				if control.paramKey == "timeDecay" then
					self.timeDecay = self.controls.timeDecay.value:getValue()					
				end
			end
		)
	end
end

-- Set button Apply control callback
function NotesObject:setButtonApplyControlCallback()

	-- Button copy lyrics to clipboard
	self.applyButtonValue:setValueChangeCallback(function()
			if SV:getPlayback():getStatus() == "stopped" then
				SV:getPlayback():play()
				self.labelApply = SV:T("Stop")
				SV:refreshSidePanel()
				SV:setTimeout(1, function() self:setGroupNoteInfos() end)
			else
				self.labelApply = SV:T("Stop")
				if SV:getPlayback():getStatus() == "playing" or SV:getPlayback():getStatus() == "looping"  then
					self.currentSeconds = SV:getPlayback():getPlayhead()
					SV:getPlayback():stop()
					SV:getPlayback():seek(self.currentSeconds)
					self.labelApply = SV:T("Play")
				end
			end
			SV:refreshSidePanel()
		end
	)
end

-- Display message
function NotesObject:displayMessage(message)
	self:clearTextPanel()
	self:addTextPanel(self.infosToDisplay)
	self:addTextPanel(message)
end

-- Simple trim string
function NotesObject:simpleTrim(s)
  return string.gsub(s, '[ \t]+%f[\r\n%z]', '')
end

-- Display error messages
function NotesObject:displayErrors()
	local result = ""
	if #self.errorMessages > 0 then
		for _, m in pairs(self.errorMessages) do
			result = result .. m .. "\r"
		end
	end
	return result
end

-- Get host informations
function NotesObject:getHostInformations()
	self.hostinfo = SV:getHostInfo()
	self.osType = self.hostinfo.osType  -- "macOS", "Linux", "Unknown", "Windows"
	self.osName = self.hostinfo.osName
	self.hostName = self.hostinfo.hostName
	self.languageCode = self.hostinfo.languageCode
	self.hostVersion = self.hostinfo.hostVersion
	self.hostVersionNumber = self.hostinfo.hostVersionNumber
end

-- Get object properties (debug only)
function NotesObject:getObjectProperties(obj, level)
	local result = ""
	local level = level or 0
	local maxLevel = 3
	level = level + 1
	
	for k, v in pairs(obj) do
		if obj[k] ~= nil then
			result = result .. "(level: " .. level .. ") " .. k .. "=" .. tostring(v) .. "\r"
			if type(v) == "table" then
				-- result = result .. ", size:" .. #v .. ": "
				if level < maxLevel then
					result = result .. self:getObjectProperties(v, level) .. "\r"
				else
					result = result .. "\r"
				end
			end
		end
	end
	return result
end

-- Get project duration
function NotesObject:getProjectDuration()
	local maxDuration = 0	
	local iTracks = self:getProject():getNumTracks()
	
	for iTrack = 1, iTracks do
		local trackItem = self:getProject():getTrack(iTrack)
		if trackItem:getDuration() > maxDuration then
			maxDuration = trackItem:getDuration()
		end
	end
	return maxDuration
end

-- Get string format from seconds
function NotesObject:secondsToClock(timestamp)
	return string.format("%02d:%06.3f", 
	  --math.floor(timestamp/3600), 
	  math.floor(timestamp/60)%60, 
	  timestamp%60):gsub("%.",",")
end

-- Set group note infos
function NotesObject:setGroupNoteInfos()
	self.playBackStatus = SV:getPlayback():getStatus()
	self.currentSeconds = SV:getPlayback():getPlayhead()
	
	local newInfo = self:secondsToClock(self.currentSeconds)
	
	local infos = self:setGroupNotes(newInfo)
	self:setlyricsTrackTextPanel(infos)			-- Display infos on panel
	
	-- Recursive loop 
	if SV:getPlayback():getStatus() == "playing" or SV:getPlayback():getStatus() == "looping"  then
		SV:setTimeout(100, function() self:setGroupNoteInfos() end)
	else
		-- On ending song, restart to begin (automate looping song)
		if self.currentSeconds > self:getTimeAxis():getSecondsFromBlick(self.projectDuration) then
			-- Loop playing the song
			SV:setTimeout(300, function() self:playfromStart() end)
			-- Recursive loop to display infos again
			SV:setTimeout(301, function() self:setGroupNoteInfos() end)
		end
	end
end

-- Play again from at beginning song
function NotesObject:playfromStart()
	SV:getPlayback():seek(0)
	SV:getPlayback():play()
end

-- Get the corresponding key note from pitch
function NotesObject:getKeyNote(pitch)
	local keyNote = self.keyNames[(pitch % 12) + 1]
	return keyNote
end

-- Is lyrics is a text accepted
function NotesObject:isTextAccepted(lyrics)
	local result = true
	
	-- Filter char '+' & '++' & '-' & 'br' & .cl & .pau & .sil
	for i, lyricsExcept in pairs(self.lyricsException) do
		if  lyrics == lyricsExcept then
			result = false
			break
		end
	end

	return result
end

-- Set the group notes name title with the current playing note infos
function NotesObject:setGroupNotes(infoTime)
	local infoNote = ""
	local lyrics = ""
	local groupName = ""	
	local positionBlick = self:getTimeAxis():getBlickFromSeconds(SV:getPlayback():getPlayhead() + self.timeDecay)
	local isGroupNotesExists = self:getCurrentTrack():getNumGroups() > 1
	local result = ""
	local resultLyrics = ""
	
	for iGroupNote = 1, self:getCurrentTrack():getNumGroups() do
		local groupRef = self:getCurrentTrack():getGroupReference(iGroupNote)
		local timeOffset = groupRef:getTimeOffset()
		local group = groupRef:getTarget()	
		
		if (groupRef:getOnset()) <= positionBlick and (groupRef:getEnd()) >= positionBlick then
			groupName = self:simpleTrim(group:getName())
		end
		
		infoNote, lyrics = self:getCurrentNoteInfo(group, positionBlick, timeOffset)
		infoNote = self:simpleTrim(infoNote)
		lyrics = self:simpleTrim(lyrics)

		if #infoNote > 0 then
			if #lyrics > 0 then
				if self:isTextAccepted(lyrics) then
					resultLyrics = resultLyrics .. lyrics
					self.lyrics = resultLyrics
				end
			end
			
			local iGroup = iGroupNote
			if isGroupNotesExists and iGroupNote > 1 then
				iGroup = iGroupNote - 1
			end
			if #self:simpleTrim(groupName) > 0 then
				result = result .. SV:T("Time") .. ": " .. infoTime .. " " .. SV:T("Group") .. " " .. iGroup .. "\r"
				break
			end
		end
	end
	if #self:simpleTrim(result) == 0 then
		result = result .. SV:T("Time") .. ": " .. infoTime .. "\r"
	end
	result = result .. self.lyrics .. "\r"
	return result
end

-- Get the current playing note infos
function NotesObject:getCurrentNoteInfo(group, position, timeOffset)
	local infoNote = ""
	local lyrics = ""
	for iNote = 1, group:getNumNotes() do
		local note = group:getNote(iNote)
		if note ~= nil then
			if (timeOffset + note:getOnset()) <= position 
				and (note:getEnd() + timeOffset) >= position then
				
				infoNote, lyrics = self:getNoteContent(note)
				break
			end
		end
	end
	return infoNote, lyrics
end

-- Get the note content information
function NotesObject:getNoteContent(note)
	local infoNote = "Note: " .. self:getKeyNote(note:getPitch()) .. " (" .. string.format("%03d", note:getPitch()) .. ")"
	local lyrics = ""
	if note:getLyrics() ~= nil and string.len(note:getLyrics()) > 0 then
		lyrics = note:getLyrics()
	end
	if note:getPhonemes() ~= nil and string.len(note:getPhonemes()) > 0 then
		lyrics = lyrics .. " (" .. note:getPhonemes() .. ")"
	end						
	return infoNote, lyrics
end

-- Get section
function NotesObject:getSection()
	local timeDecayMinValue = 0
	local timeDecayMaxValue = 0.5
	local timeDecayInterval = 0.1

	local timeDecayChoice = 
		{
			type = "Container",
			columns = {
				{
					type = "Slider",
					text = SV:T("Lyrics display: decay"),
					format = "%0.1f decay",
					minValue = timeDecayMinValue, 
					maxValue = timeDecayMaxValue, 
					interval = timeDecayInterval,
					value = self.controls.timeDecay.value,
					width = 1
				}
			}
		}

	-- Define CheckBox & button & textarea
	local section = {
		title = SV:T(SCRIPT_TITLE),
		rows = {
			timeDecayChoice,
			{
				type = "Container",
				columns = {
					{
						type = "TextArea",
						value = self.lyricsTextValue,
						height = 100,
						width = 1.0,
						readOnly = false
					}
				}
			},
			{
				type = "Container",
				columns = {
					{
						type = "Button",
						text = self.labelApply,
						width = 1.0,
						value = self.applyButtonValue
					}
				}
			},
			{
				type = "Container",
				columns = {
					{
						type = "TextArea",
						value = self.statusTextValue,
						height = 40,
						width = 1.0,
						readOnly = true
					}
				}
			}
		}
	}
	return section
end

-- Get panel section state
function NotesObject:getPanelSectionState()

	self.applyButtonValue:setEnabled(true)
	local errors = self:displayErrors()
	if #errors > 0 then
		self:addTextPanel(errors)
	end
	
	-- Get section data
	local section = self:getSection()

	return section
end

-- Initialize main internal object	
local notesObject = NotesObject:new()

-- Get panel section state called by Synthesizer V internal system
function getSidePanelSectionState()

	local section = notesObject:getPanelSectionState()

	return section
end
