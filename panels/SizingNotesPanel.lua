local SCRIPT_TITLE = 'Sizing Notes Length'

--[[

lua file name: SizingNotesPanel.lua

Halve and double notes length

Notice: Works only with script panel 
		introduced with Synthesizer V version >= 2.1.2

Update: Creation

2025 - JF AVILES
--]]

function getClientInfo()
	return {
		name = SV:T(SCRIPT_TITLE),
		-- category = "_JFA_Panels",
		author = "JFAVILES",
		versionNumber = 1,
		minEditorVersion = 131329,
		type = "SidePanelSection"
	}
end

-- Generated by JFA TranslateScripts.lua
function getTranslations(langCode)
	return getArrayLanguageStrings()[langCode]
end

-- Generated by JFA TranslateScripts.lua
function getArrayLanguageStrings()
	return {
		["en-us"] = {
			{"Version", "Version"},
			{"author", "author"},
			{"minEditorVersion", "minEditorVersion"},
			{"Rezising notes length", "Rezising notes length"},
			{"Infos on selected notes", "Infos on selected notes"},
			{"blicks: ", "blicks: "},
			{"Seconds: ", "Seconds: "},
			{"lyrics: ", "lyrics: "},
			{"Track seconds: ", "Track seconds: "},
			{"Selected notes: ", "Selected notes: "},
			{"Select at least one group!", "Select at least one group!"},
			{"Resizing notes length:", "Resizing notes length:"},
			{"Halve", "Halve"},
			{"Double", "Double"},
		},
	}
end

-- Define a class "NotesObject"
NotesObject = {
	displayVersion = true,	-- display version
	displayAuthor = false,	-- display author
	errorMessages = {},
	hostinfo = nil,
	osType = "",
	osName = "",
	hostName = "",
	languageCode = "", 
	hostVersion = "",
	hostVersionNumber = 0,
	controls = {},				-- controls panel
	statusTextValue = nil,   	-- text panel
	statusNoteValue = nil,   	-- text panel
	infosToDisplay = "",
	isInfosToDisplay = false,   -- debug notes
	halveNoteCoef = 0.5,		-- Halve notes coef
	doubleNoteCoef = 2,			-- Double notes coef
	debug = false,
	logs = {}
}


-- Constructor method for the NotesObject class
function NotesObject:new()
    local notesObject = {}
    setmetatable(notesObject, self)
    self.__index = self
	
	self:getHostInformations()
	
	self.controls = self:getControls()
	
	self:initializeControlsValues()
	self:setControlsCallback()
	
	self.halveNotesValue = SV:create("WidgetValue")
	self.doubleNotesValue = SV:create("WidgetValue")
	self.statusTextValue = SV:create("WidgetValue")
	self.statusTextValue:setValue("")
	self.statusTextValue:setEnabled(false)
	
	self.statusNoteValue = SV:create("WidgetValue")
	self.statusNoteValue:setValue("")
	self.statusNoteValue:setEnabled(false)
	
	self:setButtonHalveNotesLengthControlCallback()
	self:setButtonDoubleNotesLengthControlCallback()

	local infos = getClientInfo()

	self.infosToDisplay = ""
	if self.displayVersion then
		self.infosToDisplay = self.infosToDisplay .. SV:T("Version") .. ": " ..  infos.versionNumber
		if self.displayAuthor then
			self.infosToDisplay = self.infosToDisplay .. " - " .. SV:T("author") .. ": " .. infos.author
		end
	end
	-- self.infosToDisplay = self.infosToDisplay .. SV:T("minEditorVersion") .. ": " ..  infos.minEditorVersion
	self:addTextPanel(self.infosToDisplay)
	self:addTextPanel(SV:T("Rezising notes length") .. "...")
	
	if self.isInfosToDisplay then
		-- Register editor selection callback
		self:registerEditorSelectionCallback()
		self:addNoteInfoPanel(SV:T("Infos on selected notes"))
	end

    return self
end

-- Register arrangement selection callback
function NotesObject:registerEditorSelectionCallback()
	
	-- Register selection callback to load parameters when selection changes
	SV:getMainEditor():getSelection():registerSelectionCallback(function(selectionType, isSelected)
		if selectionType == "note" then
			self:onSelectionChanged()
		end
	end)
	
	-- Register clear selection callback
	SV:getMainEditor():getSelection():registerClearCallback(function(selectionType)
		if selectionType == "note" then
			self:onSelectionChanged()
		end
	end)
end

-- on note selection change
function NotesObject:onSelectionChanged()
	local selection = SV:getMainEditor():getSelection()
	local selectedNotes = selection:getSelectedNotes()
	self:clearNoteInfoPanel()
	
	if #selectedNotes > 0 then
		if #selectedNotes == 1 then
			local note = selectedNotes[1]
			local currentGroupRef = SV:getMainEditor():getCurrentGroup()
			local timeOffset = currentGroupRef:getTimeOffset()

			self:addNoteInfoPanel(SV:T("blicks: ") .. note:getOnset()
			.. "\r"
			.. SV:T("Seconds: ") .. self:secondsToClock(self:getTimeAxis():getSecondsFromBlick(note:getOnset()))
			.. "\r"
			.. SV:T("lyrics: ") .. note:getLyrics()
			.. "\r"
			.. SV:T("Track seconds: ") .. self:secondsToClock(self:getTimeAxis():getSecondsFromBlick(note:getOnset() + timeOffset))
			)
		else
			self:addNoteInfoPanel(SV:T("Selected notes: ") .. #selectedNotes)
		end
	else
		self:clearNoteInfoPanel()
	end
end

-- Trim string
function NotesObject:trim(s)
  return s:match'^()%s*$' and '' or s:match'^%s*(.*%S)'
end

-- Simple trim string
function NotesObject:simpleTrim(s)
  return string.gsub(s, '[ \t]+%f[\r\n%z]', '')
end


-- Show message dialog
function NotesObject:show(message)
	SV:showMessageBox(SV:T(SCRIPT_TITLE), message)
end

-- Get selected groups
function NotesObject:getSelectedGroups()
	return SV:getArrangement():getSelection():getSelectedGroups()
end

-- Get current track
function NotesObject:getCurrentTrack()
	return SV:getMainEditor():getCurrentTrack()
end

-- Get timeAxis
function NotesObject:getTimeAxis()
	return self:getProject():getTimeAxis()
end

-- Get project
function NotesObject:getProject()
	return SV:getProject()
end

-- Add log into self.logs
function NotesObject:addLogs(message)
	table.insert(self.logs, message)
end

-- Display logs into panel
function NotesObject:addLogsInPanel()
	for i = 1, #self.logs do
		self:addTextPanel(self.logs[i])
	end
end

-- Store error message
function NotesObject:error(message)
	table.insert(self.errorMessages, message)
end

-- Display error messages
function NotesObject:displayErrors()
	local result = ""
	if #self.errorMessages > 0 then
		for _, m in pairs(self.errorMessages) do
			result = result .. m .. "\r"
		end
	end
	return result
end

-- Get host informations
function NotesObject:getHostInformations()
	self.hostinfo = SV:getHostInfo()
	self.osType = self.hostinfo.osType  -- "macOS", "Linux", "Unknown", "Windows"
	self.osName = self.hostinfo.osName
	self.hostName = self.hostinfo.hostName
	self.languageCode = self.hostinfo.languageCode
	self.hostVersion = self.hostinfo.hostVersion
	self.hostVersionNumber = self.hostinfo.hostVersionNumber
end

-- Get controls panel
function NotesObject:getControls()

	local controls = {
		timeCoef = {
			value = SV:create("WidgetValue"),
			defaultValue = 2,  -- x2
			paramKey = "timeCoef"
		}
	}
	return controls
end

-- Initialize widget values
function NotesObject:initializeControlsValues()
	-- Initialize widget values
	for key, control in pairs(self.controls) do
		control.value:setValue(control.defaultValue)
	end
end

-- Set controls callback
function NotesObject:setControlsCallback()
	for key, control in pairs(self.controls) do
		control.value:setValueChangeCallback(function()
			-- do something may be
			-- self:addLogsInPanel()
			end
		)
	end
end

-- Display message
function NotesObject:displayMessage(message)
	self:clearTextPanel()
	self:addTextPanel(self.infosToDisplay)
	self:addTextPanel(message)
end

-- Set button halve notes length control callback
function NotesObject:setButtonHalveNotesLengthControlCallback()

	-- Button halve notes length
	self.halveNotesValue:setValueChangeCallback(function()
			self:getProject():newUndoRecord()			
			self:updateNotesLength(self.halveNoteCoef) -- * 0.5
		end
	)
end

-- Set button double notes length control callback
function NotesObject:setButtonDoubleNotesLengthControlCallback()

	-- Button double notes length
	self.doubleNotesValue:setValueChangeCallback(function()
			self:getProject():newUndoRecord()			
			self:updateNotesLength(self.doubleNoteCoef) -- * 2
		end
	)
end

-- Update notes length()
function NotesObject:updateNotesLength(coef)
	-- local BPM = self:getProjectTempo(0)
	local groupsSelected = self:getSelectedGroups()
	local newNotesBeginPos = {}

	if #groupsSelected > 0 then
		for _, refGroup in pairs(groupsSelected) do
			local noteGroup = refGroup:getTarget()
			local notesCount = noteGroup:getNumNotes()
			if notesCount > 0 then
				for iNote = 1, notesCount do
					local note = noteGroup:getNote(iNote)
					if iNote > 1 then
						local timeBeginPos = self:getTimeAxis():getSecondsFromBlick(note:getOnset())
						local newTimeBeginPos = timeBeginPos * coef

						-- Store updated notes to be updated further below (bug if doing this there!)
						table.insert(newNotesBeginPos, {note = note, value = self:getTimeAxis():getBlickFromSeconds(newTimeBeginPos)})
						
					end
					-- Update note duration only
					note:setDuration(note:getDuration()  * coef)
				end
			end
			
			-- Update starting notes (workaround because this during main loop = bug in notes indices!)
			for iNote, val in pairs(newNotesBeginPos) do
				local note = val.note
				-- Update note position
				note:setOnset(val.value)
			end
		end
	else
		-- No group selected
		self:show(SV:T("Select at least one group!"))
	end

end

-- Get object properties
function NotesObject:getObjectProperties(obj, level)
	local result = ""
	local level = level or 0
	local maxLevel = 3
	level = level + 1
	
	for k, v in pairs(obj) do
		if obj[k] ~= nil then
			result = result .. "(level: " .. level .. ") " .. k .. "=" .. tostring(v) .. "\r"
			if type(v) == "table" then
				result = result .. ", size:" .. #v .. ": "
				if level < maxLevel then
					result = result .. getObjectProperties(v, level) .. "\r"
				else
					result = result .. "\r"
				end
			end
		end
	end
	return result
end

-- Get string format from seconds
function NotesObject:secondsToClock(timestamp)
	return string.format("%01dmn %02.1fs",
	  math.floor(timestamp/60)%60, 
	  timestamp%60):gsub("%.",",")
end

-- Split string by sep char
function NotesObject:split(str, sep)
   local result = {}
   local regex = ("([^%s]+)"):format(sep)
   for each in str:gmatch(regex) do
	  table.insert(result, each)
   end
   return result
end

-- Display message box in panel
function NotesObject:addTextPanel(message)
	local old = self.statusTextValue:getValue()
	local sepLine = "\r"
	if #old > 0 then
		message = old .. sepLine .. message
	end
	self.statusTextValue:setValue(message)
end

-- Clear display message in panel
function NotesObject:clearTextPanel()
	self.statusTextValue:setValue("")
end

-- Display note info in panel
function NotesObject:addNoteInfoPanel(message)
	local old = self.statusNoteValue:getValue()
	local sepLine = "\r"
	if #old > 0 then
		message = old .. sepLine .. message
	end
	self.statusNoteValue:setValue(message)
end

-- Clear display note info in panel
function NotesObject:clearNoteInfoPanel()
	self.statusNoteValue:setValue("")
end

-- Get current project tempo
function NotesObject:getProjectTempo(seconds)
	local tempoActive = 120
	local blicks = self:getTimeAxis():getBlickFromSeconds(seconds)
	local tempoMarks = self:getTimeAxis():getAllTempoMarks()
	for iTempo = 1, #tempoMarks do
		local tempoMark = tempoMarks[iTempo]
		if tempoMark ~= nil and blicks >= tempoMark.position then
			tempoActive = tempoMark.bpm
		end
	end
	return math.floor(tempoActive)
end


-- Get section
function NotesObject:getSection()
	local infoNoteDisplay = {}
	
	if self.isInfosToDisplay then
		infoNoteDisplay = 
			{
				type = "Container",
				columns = {
					{
						type = "TextArea",
						value = self.statusNoteValue,
						height = 80,
						width = 1.0,
						readOnly = true
					}
				}
			}
	end
	
	-- Define CheckBox & button & textarea
	local section = {
		title = SV:T(SCRIPT_TITLE),
		rows = {
			infoNoteDisplay,
			{
				type = "Label",
				text = SV:T("Resizing notes length:"),
			},
			{
				type = "Container",
				columns = {
					{
						type = "Button",
						text = SV:T("Halve"),
						width = 1.0,
						value = self.halveNotesValue
					}
				}
			},
			{
				type = "Container",
				columns = {
					{
						type = "Button",
						text = SV:T("Double"),
						width = 1.0,
						value = self.doubleNotesValue
					}
				}
			},
			{
				type = "Container",
				columns = {
					{
						type = "TextArea",
						value = self.statusTextValue,
						height = 40,
						width = 1.0,
						readOnly = true
					}
				}
			}
		}
	}
	return section
end

-- Get panel section state
function NotesObject:getPanelSectionState()

	self.halveNotesValue:setEnabled(true)
	self.doubleNotesValue:setEnabled(true)
	local errors = self:displayErrors()
	if #errors > 0 then
		self:addTextPanel(errors)
	end
	
	-- Get section data
	local section = self:getSection()

	return section
end

-- Initialize main internal object	
local notesObject = NotesObject:new()

-- Get panel section state called by Synthesizer V internal system
function getSidePanelSectionState()

	local section = notesObject:getPanelSectionState()

	return section
end
