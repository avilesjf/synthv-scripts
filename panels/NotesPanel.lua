local SCRIPT_TITLE = '.Notes project'

--[[

Synthesizer V Studio Pro Script
 
lua file name: NotesPanel.lua

Notice: Works only with script panel 
		introduced with Synthesizer V version >= 2.1.2b1

2025 - JF AVILES
--]]

function getClientInfo()
	return {
		name = SV:T(SCRIPT_TITLE),
		-- category = "_JFA_Panels",
		author = "JFAVILES",
		versionNumber = 1,
		minEditorVersion = 131329,
		type = "SidePanelSection"
	}
end

-- Generated by JFA TranslateScripts.lua
function getTranslations(langCode)
	return getArrayLanguageStrings()[langCode]
end

-- Generated by JFA TranslateScripts.lua
function getArrayLanguageStrings()
	return {
		["en-us"] = {
			{"Version", "Version"},
			{"author", "author"},
			{"minEditorVersion", "minEditorVersion"},
			{"Project notes", "Project notes"},
			{"Notes cleared!", "Notes cleared!"},
			{"Remember to save this project!", "Remember to save this project!"},
			{"Notes loaded!", "Notes loaded!"},
			{"Project notes! Click OK button to save notes!", "Project notes! Click OK button to save notes!"},
			{"Notes saved!", "Notes saved!"},
			{"Notes created!", "Notes created!"},
			{"Project notes:", "Project notes:"},
			{"Load notes project", "Load notes project"},
			{"Input notes project", "Input notes project"},
			{"Save notes project", "Save notes project"},
			{"Clear notes project", "Clear notes project"},
		},
	}
end

-- Define a class "NotesObject"
NotesObject = {
	playBack = nil,
	playHeadPosition = nil,
	displayVersion = false,	-- display version
	displayAuthor = false,	-- display author
	defaultLyrics = "la",
	errorMessages = {},
	currentPlayheadSeconds = 0,
	hostinfo = nil,
	osType = "",
	osName = "",
	hostName = "",
	languageCode = "", 
	hostVersion = "",
	hostVersionNumber = 0,
	debug = false,
	saved_melodies = {},			-- Storage for generated melodies
	controls = {},					-- controls panel
	clearButtonValue = nil, 		-- button Clear notes
	loadButtonValue = nil, 			-- button load notes
	showFormButtonValue = nil, 		-- button show form
	applyButtonValue = nil, 		-- button apply save notes
	statusTextValue = nil,   		-- text panel
	projectNotesTextValue = nil,	-- project notes text panel
	projectNotes = "",
	infosToDisplay = "",
	logs = {}
}

-- Constructor method for the NotesObject class
function NotesObject:new()
    local notesObject = {}
    setmetatable(notesObject, self)
    self.__index = self
	
	self:getHostInformations()
	
	self.controls = self:getControls()	
	self:initializeControlsValues()
	self:setControlsCallback()
	
	self.clearButtonValue = SV:create("WidgetValue")
	self.showFormButtonValue = SV:create("WidgetValue")
	self.loadButtonValue = SV:create("WidgetValue")
	self.applyButtonValue = SV:create("WidgetValue")
	
	self.statusTextValue = SV:create("WidgetValue")
	self.statusTextValue:setValue("")
	self.statusTextValue:setEnabled(false)

	self.projectNotesTextValue = SV:create("WidgetValue")
	self.projectNotesTextValue:setValue("")
	self.projectNotesTextValue:setEnabled(false)
	
	self:setButtonClearControlCallback()
	self:setButtonLoadControlCallback()
	self:setButtonApplyControlCallback()
	self:setButtonShowFormControlCallback()
	
	local infos = getClientInfo()

	self.infosToDisplay = ""
	if self.displayVersion then
		self.infosToDisplay = self.infosToDisplay .. SV:T("Version") .. ": " ..  infos.versionNumber
		if self.displayAuthor then
			self.infosToDisplay = self.infosToDisplay .. " - " .. SV:T("author") .. ": " .. infos.author
		end
	end
	-- self.infosToDisplay = self.infosToDisplay .. SV:T("minEditorVersion") .. ": " ..  infos.minEditorVersion
	self:addTextPanel(self.infosToDisplay)
	self:addTextPanel(SV:T("Project notes") .. "...")
	
	-- self:getProjectData()
	self:setProjectNotesTextPanel(self.projectNotes)
	
    return self
end

-- Show message dialog
function NotesObject:show(message)
	SV:showMessageBox(SV:T(SCRIPT_TITLE), message)
end

-- Get selected groups
function NotesObject:getSelectedGroups()	
	return SV:getArrangement():getSelection():getSelectedGroups()
end

-- Get current track
function NotesObject:getCurrentTrack()
	return SV:getMainEditor():getCurrentTrack()
end

-- Get timeAxis
function NotesObject:getTimeAxis()
	return self:getProject():getTimeAxis()
end

-- Get project
function NotesObject:getProject()
	return SV:getProject()
end

-- Add log into self.logs
function NotesObject:addLogs(message)
	table.insert(self.logs, message)
end

-- Display logs into panel
function NotesObject:addLogsInPanel()
	for i = 1, #self.logs do
		self:addTextPanel(self.logs[i])
	end
end

-- Set project notes text in panel
function NotesObject:setProjectNotesTextPanel(projectNotes)
	self.projectNotesTextValue:setValue(projectNotes)
end

-- Display message box in panel
function NotesObject:addTextPanel(message)
	local old = self.statusTextValue:getValue()
	local sepLine = "\r"
	if #old > 0 then
		message = old .. sepLine .. message
	end
	self.statusTextValue:setValue(message)
end

-- Clear display message in panel
function NotesObject:clearTextPanel()
	self.statusTextValue:setValue("")
end

-- Store error message
function NotesObject:error(message)
	table.insert(self.errorMessages, message)
end

-- set project modified
function NotesObject:setProjectUpdated()
	local currentTrack = self:getCurrentTrack()
	currentTrack:setName(currentTrack:getName())	
end

-- Clear user project data
function NotesObject:clearProjectData()
	self.projectNotes = ""
	self:getProject():setScriptData("ProjectNotes", self.projectNotes)
end

-- Save user project data
function NotesObject:saveProjectData()
	self.projectNotes = self.projectNotesTextValue:getValue()
	self:getProject():setScriptData("ProjectNotes", self.projectNotes)
end

-- Get user project data
function NotesObject:getProjectData()
	self.projectNotes = self:getProject():getScriptData("ProjectNotes") or ""
end

-- Get controls panel
function NotesObject:getControls()

	local controls = {
		control1 = {
			value = SV:create("WidgetValue"),
			defaultValue = 0, 
			paramKey = "control1"
		}
	}
	return controls
end

-- Initialize widget values
function NotesObject:initializeControlsValues()
	-- Initialize widget values
	for key, control in pairs(self.controls) do
		control.value:setValue(control.defaultValue)
		-- self:addLogs(key .. "=" .. tostring(control.defaultValue))
		-- self:addLogs(key .. "=" .. self:getObjectProperties(control))
	end
end

-- Set controls callback
function NotesObject:setControlsCallback()
	for key, control in pairs(self.controls) do
		control.value:setValueChangeCallback(function()
				-- self:addLogsInPanel()
			end
		)
	end
end

-- Set button Clear control callback
function NotesObject:setButtonClearControlCallback()

	-- Button load notes
	self.clearButtonValue:setValueChangeCallback(function()
			self:getProject():newUndoRecord()
			self:setProjectUpdated()
			self:clearProjectData()
			self:setProjectNotesTextPanel(self.projectNotes)
			self:displayMessage(SV:T("Notes cleared!") .. "\r" .. SV:T("Remember to save this project!"))
		end
	)
end

-- Set button Load control callback
function NotesObject:setButtonLoadControlCallback()

	-- Button load notes
	self.loadButtonValue:setValueChangeCallback(function()
			self:getProjectData()
			self:setProjectNotesTextPanel(self.projectNotes)
			self:displayMessage(SV:T("Notes loaded!"))
			-- SV:refreshSidePanel()
		end
	)
end

-- Set button show form
function NotesObject:setButtonShowFormControlCallback()

	-- Button Save notes
	self.showFormButtonValue:setValueChangeCallback(function()
			local title = SV:T("Project notes! Click OK button to save notes!")
			
			local userInput = self:showForm(title, self.projectNotes)
			if userInput.status then
				self.projectNotes = userInput.answers.notes
				self.projectNotesTextValue:setValue(self.projectNotes)
				self:setProjectUpdated()
				self:saveProjectData()
				self:displayMessage(SV:T("Notes saved!") .. "\r" .. SV:T("Remember to save this project!"))				
			end
		end
	)
end

-- Set button Apply control callback
function NotesObject:setButtonApplyControlCallback()

	-- Button Save notes
	self.applyButtonValue:setValueChangeCallback(function()
			self:getProject():newUndoRecord()
			self:setProjectUpdated()
			self:saveProjectData()
			self:displayMessage(SV:T("Notes created!") .. "\r" .. SV:T("Remember to save this project!"))
		end
	)
end

-- Show custom dialog box
function NotesObject:showForm(title, notes)
	local form = {
		title = SV:T(SCRIPT_TITLE),
		message = title,
		buttons = "OkCancel",
		widgets = {
			{
				name = "notes", type = "TextArea", label = SV:T("Project notes:"),
				height = 400,
				default = notes
			},
			{
				name = "separator", type = "TextArea", label = "", height = 0
			}
		}
	}
	self.dialogTitle = title
	self.onResponse = function(response) self:dialogResponse(response) end
	return SV:showCustomDialog(form)
end

-- Display message
function NotesObject:displayMessage(message)
	self:clearTextPanel()
	self:addTextPanel(self.infosToDisplay)
	self:addTextPanel(message)
end
	
-- Display error messages
function NotesObject:displayErrors()
	local result = ""
	if #self.errorMessages > 0 then
		for _, m in pairs(self.errorMessages) do
			result = result .. m .. "\r"
		end
	end
	return result
end

-- Get host informations
function NotesObject:getHostInformations()
	self.hostinfo = SV:getHostInfo()
	self.osType = self.hostinfo.osType  -- "macOS", "Linux", "Unknown", "Windows"
	self.osName = self.hostinfo.osName
	self.hostName = self.hostinfo.hostName
	self.languageCode = self.hostinfo.languageCode
	self.hostVersion = self.hostinfo.hostVersion
	self.hostVersionNumber = self.hostinfo.hostVersionNumber
end

-- Get object properties (debug only)
function NotesObject:getObjectProperties(obj, level)
	local result = ""
	local level = level or 0
	local maxLevel = 3
	level = level + 1
	
	for k, v in pairs(obj) do
		if obj[k] ~= nil then
			result = result .. "(level: " .. level .. ") " .. k .. "=" .. tostring(v) .. "\r"
			if type(v) == "table" then
				-- result = result .. ", size:" .. #v .. ": "
				if level < maxLevel then
					result = result .. self:getObjectProperties(v, level) .. "\r"
				else
					result = result .. "\r"
				end
			end
		end
	end
	return result
end

-- Get section
function NotesObject:getSection()
	
	-- Define CheckBox & button & textarea
	local section = {
		title = SV:T(SCRIPT_TITLE),
		rows = {
			{
				type = "Container",
				columns = {
					{
						type = "Button",
						text = SV:T("Load notes project"),
						width = 1.0,
						value = self.loadButtonValue
					}
				}
			},
			{
				type = "Container",
				columns = {
					{
						type = "TextArea",
						value = self.projectNotesTextValue,
						height = 300,
						width = 1.0,
						readOnly = false
					}
				}
			},
			{	-- This to permit adding carriage return in notes
				type = "Container",
				columns = {
					{
						type = "Button",
						text = SV:T("Input notes project"),
						width = 1.0,
						value = self.showFormButtonValue
					}
				}
			},
			{
				type = "Container",
				columns = {
					{
						type = "Button",
						text = SV:T("Save notes project"),
						width = 1.0,
						value = self.applyButtonValue
					}
				}
			},
			{
				type = "Container",
				columns = {
					{
						type = "TextArea",
						value = self.statusTextValue,
						height = 60,
						width = 1.0,
						readOnly = true
					}
				}
			},
			{
				type = "Container",
				columns = {
					{
						type = "Button",
						text = SV:T("Clear notes project"),
						width = 1.0,
						value = self.clearButtonValue
					}
				}
			}
		}
	}
	return section
end

-- Get panel section state
function NotesObject:getPanelSectionState()

	self.clearButtonValue:setEnabled(true)
	self.loadButtonValue:setEnabled(true)
	self.showFormButtonValue:setEnabled(true)
	self.applyButtonValue:setEnabled(true)
	self.projectNotesTextValue:setEnabled(true)
	
	local errors = self:displayErrors()
	if #errors > 0 then
		self:addTextPanel(errors)
	end
	
	-- Get section data
	local section = self:getSection()

	return section
end

-- Initialize main internal object	
local notesObject = NotesObject:new()

-- Get panel section state called by Synthesizer V internal system
function getSidePanelSectionState()

	local section = notesObject:getPanelSectionState()
	return section
end
